Repository with a score/rating system. Half the score is given by how
many packages use your packages, and the other half is given by user
rating/comments.


Prelude can still be manually imported and will cause two Preludes to
be imported. And the consequence is that symbols from Prelude will be
multiply defined.


LALR grammar rules really look like pattern matching... especially
those $1, $2, and so on...


Integration with software development tools, for example, online
repository, packages, and version control.


Add a synthesis declaration, for example,

sig f : a -> b -> a
def f x@ y@ = x

syn f : a -> b -> a


Base types should be looked up in the environment instead of being
hardcoded in the parser. And base types should also be loaded in the
typechecker's context. And looking for base types "isFn" and "toFn" is
definitely not the right thing to do.


Functions cannot be redefined in interactive.


Add type annotations like so?

  def f = x:a (negInt x) -- polymorphic type


Remove '@' in patterns: '@' SimpleExprPat


Comments are broken.


Remove the benign shift/reduce conflicts.


Add lines in semantic errors.


Fix mutually recursive functions.


Add inductive and coinductive types :)


Typechecker crashes when functions are applied with the wrong number
of arguments.


Clean Core modules and the link stuff.


Rename 'flattenId' to 'joinId'.


Definitions and shadowing:
- redefinition of names is not being properly detected and reported
- check shadowing


When using names from Core, don't just put the string in the middle of
the code because it makes it untraceable.  Instead, create a name
holding the string and use it.


The generated documentation contains a link to source.  This source
contains free names.  These names can be copied to the clipboard with
their corresponding lexical information, such as, the imports.


Currently, it is not possible to distinguish between module name and
typename
:def < module | typename | fnname >


Type and constructor with the same name have the same type predicate.


Renamer should be a NameM monad.
