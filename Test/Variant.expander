let nonrec isFruit :: Fruit -> Bool = isType# "Fruit"
let nonrec isApple =
  \arg#0 -> cond isFruit arg#0 -> isVariant0# "Fruit" 0 arg#0
let nonrec isBanana =
  \fn#1 ->
    \arg#2 -> cond isFruit arg#2 -> isVariant# "Fruit" 1 fn#1 arg#2
let nonrec isFig =
  \fn#3 ->
    \arg#4 -> cond isFruit arg#4 -> isVariant# "Fruit" 2 fn#3 arg#4
let nonrec isOrange =
  \fn#5 ->
    \arg#6 -> cond isFruit arg#6 -> isVariant# "Fruit" 3 fn#5 arg#6
let nonrec mkApple =
  (\r#7 -> cond isFruit r#7 -> r#7) (mkVariant0# "Fruit" 0)
let nonrec mkBanana =
  \x ->
    cond
      isInt x ->
        (\r#8 -> cond isFruit r#8 -> r#8) (mkVariant# "Fruit" 1 x)
let nonrec mkFig =
  \arg#9 ->
    cond
      isTuple2 (mkTuple2 isInt isReal) arg#9 ->
        (\r#10 -> cond isFruit r#10 -> r#10) (mkVariant# "Fruit" 2 arg#9)
let nonrec mkOrange =
  \arg#11 ->
    cond
      isFruit arg#11 ->
        (\r#12 -> cond isFruit r#12 -> r#12) (mkVariant# "Fruit" 3 arg#11)
let nonrec unBanana =
  \arg#13 ->
    cond
      isFruit arg#13 -> (\x -> cond isInt x -> x) (unVariant# arg#13)
let nonrec unFig =
  \arg#14 ->
    cond
      isFruit arg#14 ->
        (\r#15 -> cond isTuple2 (mkTuple2 isInt isReal) r#15 -> r#15)
          (unVariant# arg#14)
let nonrec unOrange =
  \arg#16 ->
    cond
      isFruit arg#16 ->
        (\r#17 -> cond isFruit r#17 -> r#17) (unVariant# arg#16)
let nonrec f1 =
  \a ->
    cond
      isApple a -> 0
      isBanana isInt a ->
        let nonrec x = unBanana a in
        1
      isFig (isTuple2 (mkTuple2 isInt isReal)) a ->
        let nonrec x = tuple2Ref0# (unFig a) in
        let nonrec y = tuple2Ref1# (unFig a) in
        2
      isOrange isFruit a ->
        let nonrec x = unOrange a in
        3