let nonrec lambda#6 = \_#2 -> true#
let nonrec lambda#7 = \_#3 -> true#
let nonrec lambda#8 = \_#4 -> true#
let nonrec lambda#9 = \_#5 -> true#
let rec eqSeq =
  \arg#0 ->
    \arg#1 ->
      cond
        cond
          isList# null arg#0 ->
            cond
              isList# null arg#1 -> true#
              true# -> false#
          true# -> false# ->
          true
        cond
          isHeadTail# lambda#6 lambda#7 arg#0 ->
            cond
              isHeadTail# lambda#8 lambda#9 arg#1 -> true#
              true# -> false#
          true# -> false# ->
          let nonrec z = head# arg#0 in
          let nonrec zs = tail# arg#0 in
          let nonrec w = head# arg#1 in
          let nonrec ws = tail# arg#1 in
          cond
            eq z w ->
              cond
                eqSeq zs ws -> true#
                true# -> false#
            true# -> false#
        true# -> false
let nonrec lambda#10 =
  \x ->
    \y ->
      cond
        cond
          isInt x ->
            cond
              isInt y -> true#
              true# -> false#
          true# -> false# ->
          eqInt x y
        true# -> eqSeq x y
let nonrec eq = lambda#10