let rec eq =
  let rec eqSeq =
    \arg#0 ->
      \arg#1 ->
        cond
          cond
            isList# null arg#0 ->
              cond
                isList# null arg#1 -> true#
                true# -> false#
            true# -> false# ->
            true
          cond
            isHeadTail# (\_#2 -> true#) (\_#3 -> true#) arg#0 ->
              cond
                isHeadTail# (\_#4 -> true#) (\_#5 -> true#) arg#1 -> true#
                true# -> false#
            true# -> false# ->
            let nonrec z = head# arg#0 in
            let nonrec zs = tail# arg#0 in
            let nonrec w = head# arg#1 in
            let nonrec ws = tail# arg#1 in
            cond
              eq z w ->
                cond
                  eqSeq zs ws -> true#
                  true# -> false#
              true# -> false#
          true# -> false in
  \x ->
    \y ->
      cond
        cond
          isInt x ->
            cond
              isInt y -> true#
              true# -> false#
          true# -> false# ->
          eqInt x y
        true# -> eqSeq x y