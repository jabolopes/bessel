let rec eq =
  let rec eqSeq =
    \arg#0 ->
      \arg#1 ->
        cond
          cond
            isList null arg#0 ->
              cond
                isList null arg#1 -> true#
                true# -> false#
            true# -> false# ->
            true
          cond
            isHeadTail (\_ -> true#) (\_ -> true#) arg#0 ->
              cond
                isHeadTail (\_ -> true#) (\_ -> true#) arg#1 -> true#
                true# -> false#
            true# -> false# ->
            let nonrec z = hd arg#0 in
            let nonrec zs = tl arg#0 in
            let nonrec w = hd arg#1 in
            let nonrec ws = tl arg#1 in
            cond
              eq z w ->
                cond
                  eqSeq zs ws -> true#
                  true# -> false#
              true# -> false#
          cond
            (\_ -> true#) arg#0 ->
              cond
                (\_ -> true#) arg#1 -> true#
                true# -> false#
            true# -> false# ->
            false in
  \x#2 ->
    \y#3 ->
      cond
        cond
          isInt x#2 ->
            cond
              isInt y#3 -> true#
              true# -> false#
          true# -> false# ->
          let nonrec x = x#2 in
          let nonrec y = y#3 in
          eqInt x y
        cond
          (\_ -> true#) x#2 ->
            cond
              (\_ -> true#) y#3 -> true#
              true# -> false#
          true# -> false# ->
          let nonrec x = x#2 in
          let nonrec y = y#3 in
          eqSeq x y