let nonrec patChar =
  \arg#0 ->
    cond
      (\arg#1 ->
         cond
           isChar# arg#1 ->
             cond
               eqChar# 'a' arg#1 -> true#
               true# -> false#
           true# -> false#)
        arg#0 ->
        'a'
let nonrec patInt =
  \arg#2 ->
    cond
      (\arg#3 ->
         cond
           isInt# arg#3 ->
             cond
               eqInt# 0 arg#3 -> true#
               true# -> false#
           true# -> false#)
        arg#2 ->
        0
let nonrec patReal =
  \arg#4 ->
    cond
      (\arg#5 ->
         cond
           isReal# arg#5 ->
             cond
               eqReal# 0.0 arg#5 -> true#
               true# -> false#
           true# -> false#)
        arg#4 ->
        0.0
let nonrec patString =
  \arg#6 ->
    cond
      (\arg#7 ->
         cond
           isString# arg#7 ->
             cond
               eqString# "hello" arg#7 -> true#
               true# -> false#
           true# -> false#)
        arg#6 ->
        "hello"
let nonrec patVariantTag =
  \arg#8 ->
    cond
      isMyCons isInt arg#8 ->
        let nonrec x = unMyCons arg#8 in
        x
let nonrec patBinOp =
  \arg#9 ->
    cond
      isHeadTail#
        (\arg#10 ->
           cond
             isInt# arg#10 ->
               cond
                 eqInt# 0 arg#10 -> true#
                 true# -> false#
             true# -> false#)
        (isList#
           (cons
              (\arg#11 ->
                 cond
                   isInt# arg#11 ->
                     cond
                       eqInt# 1 arg#11 -> true#
                       true# -> false#
                   true# -> false#)
              null))
        arg#9 ->
        let nonrec x = head# arg#9 in
        let nonrec y = tail# arg#9 in
        cons 0 1
let nonrec patAll = \_#12 -> 0
let nonrec patBind = \x -> x
let nonrec patGuard = \arg#13 -> cond isInt arg#13 -> 0
let nonrec patBindGuard = \x -> cond isInt x -> x
let nonrec patEmptyList1 =
  \arg#14 -> cond isList# null arg#14 -> null
let nonrec patEmptyList2 = \x -> cond isList# null x -> x
let nonrec patList1 =
  \arg#15 ->
    cond
      isList#
        (cons (\_#17 -> true#)
           (cons isInt
              (cons isInt
                 (cons
                    (\arg#16 ->
                       cond
                         isInt# arg#16 ->
                           cond
                             eqInt# 1 arg#16 -> true#
                             true# -> false#
                         true# -> false#)
                    null))))
        arg#15 ->
        let nonrec x = head# arg#15 in
        let nonrec y = head# (tail# (tail# arg#15)) in
        cons 0 (cons 0 (cons 0 (cons 1 null)))
let nonrec patList2 =
  \arg#18 ->
    cond
      isList#
        (cons (\_#20 -> true#)
           (cons isInt
              (cons isInt
                 (cons
                    (\arg#19 ->
                       cond
                         isInt# arg#19 ->
                           cond
                             eqInt# 1 arg#19 -> true#
                             true# -> false#
                         true# -> false#)
                    null))))
        arg#18 ->
        let nonrec x = head# arg#18 in
        let nonrec y = head# (tail# (tail# arg#18)) in
        cons 0 (cons 0 (cons 0 (cons 1 null)))
let nonrec patEmptyTuple1 =
  \arg#21 -> cond isTuple0 arg#21 -> mkTuple0
let nonrec patEmptyTuple2 = \x -> cond isTuple0 x -> x
let nonrec patTuple1 =
  \arg#22 ->
    cond
      isTuple4
        (mkTuple4 (\_#24 -> true#) isInt isInt
           (\arg#23 ->
              cond
                isInt# arg#23 ->
                  cond
                    eqInt# 1 arg#23 -> true#
                    true# -> false#
                true# -> false#))
        arg#22 ->
        let nonrec x = tuple4Ref0# arg#22 in
        let nonrec y = tuple4Ref2# arg#22 in
        mkTuple4 0 0 0 1
let nonrec patTuple2 =
  \arg#25 ->
    cond
      isTuple4
        (mkTuple4 (\_#27 -> true#) isInt isInt
           (\arg#26 ->
              cond
                isInt# arg#26 ->
                  cond
                    eqInt# 1 arg#26 -> true#
                    true# -> false#
                true# -> false#))
        arg#25 ->
        let nonrec x = tuple4Ref0# arg#25 in
        let nonrec y = tuple4Ref2# arg#25 in
        mkTuple4 0 0 0 1